import i2c
import time
    
i2c.init(2, 400)
#i2c.transmit(2, 0x77, b'\x05', 1)
#nh3 = i2c.receive(2, 0x77, 1, 1)
#print(nh3)
time.sleep(5)

# get nh3
#print("[*-*]TempM TempL")

print("[*-*] iir_32")
i2c.transmit(2, 0x77, b'\x1A\x06', 1)
#time.sleep_ms(20)
#i2c.transmit(2, 0x77, b'\x06', 1)
in_data = []
for i in range(12):
    time.sleep_ms(200)
    rec_byte = i2c.receive(2, 0x77, 1, 1)
    rec_int = int.from_bytes(rec_byte, "little")
    in_data.append(rec_int)
    #print(hex(int.from_bytes(nh3, "little")), end=" ")
    #print(rec_int, end=" ")
print(in_data, end="\t")
print("")
time.sleep(1)
while(1):
    """
    print("[*-*]ID")
    i2c.transmit(2, 0x77, b'\x00', 1)
    in_data = []
    for i in range(4):
        time.sleep_ms(200)
        rec_byte = i2c.receive(2, 0x77, 1, 1)
        rec_int = int.from_bytes(rec_byte, "little")
        in_data.append(rec_int)
        #print(hex(int.from_bytes(nh3, "little")), end=" ")
        #print(rec_int, end=" ")
    print(in_data, end="\t")
    print("")
    time.sleep(1)
    print("[*-*]iir_2")
    i2c.transmit(2, 0x77, b'\x1A\x01', 1)
    #time.sleep_ms(20)
    #i2c.transmit(2, 0x77, b'\x01', 1)
    in_data = []
    for i in range(12):
        time.sleep_ms(200)
        rec_byte = i2c.receive(2, 0x77, 1, 1)
        rec_int = int.from_bytes(rec_byte, "little")
        in_data.append(rec_int)
        #print(hex(int.from_bytes(nh3, "little")), end=" ")
        #print(rec_int, end=" ")
    print(in_data, end="\t")
    print("")
    time.sleep(1)
    print("[*-*]iir_32")
    i2c.transmit(2, 0x77, b'\x1A\x06', 1)
    #time.sleep_ms(20)
    #i2c.transmit(2, 0x77, b'\x06', 1)
    in_data = []
    for i in range(12):
        time.sleep_ms(200)
        rec_byte = i2c.receive(2, 0x77, 1, 1)
        rec_int = int.from_bytes(rec_byte, "little")
        in_data.append(rec_int)
        #print(hex(int.from_bytes(nh3, "little")), end=" ")
        #print(rec_int, end=" ")
    print(in_data, end="\t")
    print("")
    time.sleep(1)
    """
 
    #print("[*-*]TempM \tTempL \tTempX")
    i2c.transmit(2, 0x77, b'\x09', 1)
    in_data = []
    for i in range(12):
        time.sleep_ms(200)
        rec_byte = i2c.receive(2, 0x77, 1, 1)
        rec_int = int.from_bytes(rec_byte, "little")
        in_data.append(rec_int)
        #print(hex(int.from_bytes(nh3, "little")), end=" ")
        #print(rec_int, end=" ")
    print("TMSB,", end="\t")
    print(in_data, end="\t")
    print("")
    time.sleep(1)
    in_data = []
    i2c.transmit(2, 0x77, b'\x08', 1)
    for i in range(12):
        time.sleep_ms(200)
        rec_byte = i2c.receive(2, 0x77, 1, 1)
        rec_int = int.from_bytes(rec_byte, "little")
        in_data.append(rec_int)
        #print(hex(int.from_bytes(nh3, "little")), end=" ")
        #print(rec_int, end=" ")
    print("TLSB,", end="\t")
    print(in_data, end="\t")
    print("")
    time.sleep(1)
    in_data = []
    i2c.transmit(2, 0x77, b'\x07', 1)
    for i in range(12):
        time.sleep_ms(200)
        rec_byte = i2c.receive(2, 0x77, 1, 1)
        rec_int = int.from_bytes(rec_byte, "little")
        in_data.append(rec_int)
        #print(hex(int.from_bytes(nh3, "little")), end=" ")
        #print(rec_int, end=" ")
    print("TXSB,", end="\t")
    print(in_data, end="\t")
    print("")
    #print("[*-*]PressM \tPressL \tPressX")
    i2c.transmit(2, 0x77, b'\x06', 1)
    in_data = []
    for i in range(12):
        time.sleep_ms(200)
        rec_byte = i2c.receive(2, 0x77, 1, 1)
        rec_int = int.from_bytes(rec_byte, "little")
        in_data.append(rec_int)
        #print(hex(int.from_bytes(nh3, "little")), end=" ")
        #print(rec_int, end=" ")
    print("PMSB,", end="\t")
    print(in_data, end="\t")
    print("")
    time.sleep(1)
    in_data = []
    i2c.transmit(2, 0x77, b'\x05', 1)
    for i in range(12):
        time.sleep_ms(200)
        rec_byte = i2c.receive(2, 0x77, 1, 1)
        rec_int = int.from_bytes(rec_byte, "little")
        in_data.append(rec_int)
        #print(hex(int.from_bytes(nh3, "little")), end=" ")
        #print(rec_int, end=" ")
    print("PLSB,", end="\t")
    print(in_data, end="\t")
    print("")
    time.sleep(1)
    in_data = []
    i2c.transmit(2, 0x77, b'\x04', 1)
    for i in range(12):
        time.sleep_ms(200)
        rec_byte = i2c.receive(2, 0x77, 1, 1)
        rec_int = int.from_bytes(rec_byte, "little")
        in_data.append(rec_int)
        #print(hex(int.from_bytes(nh3, "little")), end=" ")
        #print(rec_int, end=" ")
    print("PXSB,", end="\t")
    print(in_data, end="\t")
    print("")
    #adcTemp = (in_data[-1] << 16) | (in_data[-2] << 8) | (in_data[-3])
    #adcPres = (in_data[-4] << 16) | (in_data[-5] << 8) | (in_data[-6])
    #print("[P+T] : {},{}".format(adcTemp, adcPres))
 
    #print("t", end="")
    i2c.transmit(2, 0x77, b'\x0E', 1)
    in_data = []
    for i in range(12):
        time.sleep_ms(200)
        rec_byte = i2c.receive(2, 0x77, 1, 1)
        rec_int = int.from_bytes(rec_byte, "little")
        in_data.append(rec_int)
        #print(hex(int.from_bytes(nh3, "little")), end=" ")
        #print(rec_int, end=" ")
    print("T2,", end="\t")
    print(in_data, end="\t")
    print("")
    time.sleep(1)
    in_data = []
    i2c.transmit(2, 0x77, b'\x0D', 1)
    for i in range(12):
        time.sleep_ms(200)
        rec_byte = i2c.receive(2, 0x77, 1, 1)
        rec_int = int.from_bytes(rec_byte, "little")
        in_data.append(rec_int)
        #print(hex(int.from_bytes(nh3, "little")), end=" ")
        #print(rec_int, end=" ")
    print("T1,", end="\t")
    print(in_data, end="\t")
    print("")
    time.sleep(1)
    in_data = []
    i2c.transmit(2, 0x77, b'\x0C', 1)
    for i in range(12):
        time.sleep_ms(200)
        rec_byte = i2c.receive(2, 0x77, 1, 1)
        rec_int = int.from_bytes(rec_byte, "little")
        in_data.append(rec_int)
        #print(hex(int.from_bytes(nh3, "little")), end=" ")
        #print(rec_int, end=" ")
    print("T0,", end="\t")
    print(in_data, end="\t")
    print("")

    time.sleep(10)
    """
    try:
        i2c.transmit(2, 0x18, b'\x01', 1)
        print("[*-*]nh3")
        time.sleep_us(50)
        nh3 = i2c.receive(2, 0x18, 2, 1)
        print(nh3)
        time.sleep_us(50)
        i2c.transmit(2, 0x18, b'\x02', 1)
        print("[*-*]red")
        time.sleep_us(50)
        red = i2c.receive(2, 0x18, 2, 1)
        print(red)
        time.sleep_us(50)
        i2c.transmit(2, 0x18, b'\x03', 1)
        print("[*-*]ox")
        time.sleep_us(50)
        ox = i2c.receive(2, 0x18, 2, 1)
        print(ox)
        time.sleep_us(50)
        i2c.transmit(2, 0x18, b'\x0400', 1)
        print("[*-*]nox")
        time.sleep_us(50)
        nox = i2c.receive(2, 0x18, 4, 1)
        print(nox)
    except:
        print("[-.-*] can't touch this")
    """

    
i2c.close(2)
